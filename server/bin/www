#!/usr/bin/env node

/* Sets up the environment variables from your .env file*/
require("dotenv").config();

/**
 * Module dependencies.
 */

const { app, sessionStore } = require("../app");
const http = require("http");
const db = require("../db");
const onlineUsers = require("../onlineUsers");

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || "3001");
app.set("port", port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces, and sync database.
 */

const io = require("socket.io")(server);
const jwt = require("jsonwebtoken");
const { User } = require("../db/models");

io.use((socket, next) => {
  const token = socket.handshake.auth.auth;

  if (token) {
    jwt.verify(token, process.env.SESSION_SECRET, (err, decoded) => {
      if (err) {
        socket.disconnect();
        console.error(err);
      }
      User.findOne({
        where: { id: decoded.id },
      }).then(() => {
        console.log("online");
        return next();
      });
    });
  } else {
    socket.disconnect();
    return next();
  }
}).on("connection", (socket) => {
  // Handles all removing from online!
  socket.on("disconnect", () => {
    const userId = socket.handshake.auth.user;
    const socketId = socket.id.toString();

    if (onlineUsers[userId] && onlineUsers[userId][socketId]) {
      delete onlineUsers[userId][socketId];
      if (
        onlineUsers[userId] &&
        Object.keys(onlineUsers[userId]).length === 0
      ) {
        socket.broadcast.emit("remove-offline-user", userId);
      }
    }
    console.log("Client disconnected");
  });

  socket.on("go-online", (id) => {
    if (id) {
      const onlineId = id.toString();
      const socketId = socket.id.toString();
      if (!onlineUsers[onlineId]) {
        onlineUsers[onlineId] = {};
        onlineUsers[onlineId] = { [socketId]: true };
      } else {
        onlineUsers[onlineId] = { ...onlineUsers[onlineId], [socketId]: true };
      }

      // send the user who just went online to everyone else who is already online
      socket.broadcast.emit("add-online-user", id);
    }
  });

  // send online status of all connected users in server to new client on page reload
  socket.on("add-users-to-new", (data) => {
    if (data.idToAdd) {
      const onlineId = data.idToAdd.toString();
      const socketId = socket.id.toString();
      if (!onlineUsers[onlineId]) {
        onlineUsers[onlineId] = {};
        onlineUsers[onlineId] = { [socketId]: true };

        const array = Object.keys(onlineUsers[data.idToRecieve]);

        // Send to all socket id's of that user.
        array.map((idToRecieve) => {
          io.to(idToRecieve).emit("add-users-to-new");
        });
      }
    }
  });

  socket.on("new-message", (data) => {
    const userId = socket.handshake.auth.user;
    const onlineId = data.recipientId.toString();

    const dataToSend = {
      message: data.message,
      sender: data.sender,
      recipientId: data.recipientId,
      conversationId: data.conversationId,
    };
    const array = Object.keys(onlineUsers[onlineId]);

    // send a private message to the socket with the given id
    array.map((item) => {
      io.to(item).emit("new-message", dataToSend);
    });
    if (onlineUsers[userId]) {
      const arraySender = Object.keys(onlineUsers[userId]);
      // Send to all socket id's of sender except for original sender socket id (so that sender's messages permeate throughout all of their logged in instances)
      arraySender.map((item) => {
        if (item !== socket.id) {
          io.to(item).emit("new-message", dataToSend);
        }
      });
    }
  });

  socket.on("read-message", (data) => {
    socket.broadcast.emit("read-message", data);

    if (onlineUsers[data.currentUser]) {
      const arraySender = Object.keys(onlineUsers[data.currentUser]);

      // All user's logged in accounts conversation will be updated when one instance reads the message.
      arraySender.map((item) => {
        io.to(item).emit("read-message-concurrently", data);
      });
    }
  });

  socket.on("user-typing", (data) => {
    socket.broadcast.emit("user-typing", data);
  });

  socket.on("logout", () => {
    socket.disconnect();
  });
});

sessionStore
  .sync()
  .then(() => db.sync())
  .then(() => {
    server.listen(port);
    server.on("error", onError);
    server.on("listening", onListening);
  });

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  const bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;

  console.log("Listening on " + bind);
}
