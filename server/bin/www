#!/usr/bin/env node

/* Sets up the environment variables from your .env file*/
require("dotenv").config();

/**
 * Module dependencies.
 */

const { app, sessionStore } = require("../app");
const http = require("http");
const db = require("../db");
const onlineUsers = require("../onlineUsers");

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || "3001");
app.set("port", port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces, and sync database.
 */

const io = require("socket.io")(server);
const jwt = require("jsonwebtoken");
const { User } = require("../db/models");

let userId = null;
let sessionUser = null;

io.use((socket, next) => {
  const token = socket.request.headers["x-access-token"];

  if (token) {
    jwt.verify(token, process.env.SESSION_SECRET, (err, decoded) => {
      if (err) {
        console.log(err);
        return next();
      }
      User.findOne({
        where: { id: decoded.id },
      }).then((user) => {
        sessionUser = user;
        userId = sessionUser.id;
        console.log("online");
        return next();
      });
    });
  } else {
    return next();
  }
}).on("connection", (socket) => {
  socket.on("disconnect", () => {
    delete onlineUsers[userId];
    sessionUser = null;
    userId = null;
    socket.broadcast.emit("remove-offline-user", userId);
    console.log("Client disconnected");
  });

  socket.on("go-online", (id) => {
    if (id) {
      const onlineId = id.toString();
      if (!onlineUsers[onlineId]) {
        onlineUsers[onlineId] = socket.id;
      }
      // send the user who just went online to everyone else who is already online
      socket.broadcast.emit("add-online-user", id);
    }
  });

  // send online status of all connected users in server to new client on page reload
  socket.on("add-users-to-new", (data) => {
    if (data.idToAdd) {
      const onlineId = data.idToAdd.toString();
      if (!onlineUsers[onlineId]) {
        onlineUsers[onlineId] = socket.id;
        io.to(onlineUsers[data.idToRecieve]).emit("add-users-to-new");
      }
    }
  });

  socket.on("new-message", (data) => {
    const onlineId = data.recipientId.toString();

    const dataToSend = {
      message: data.message,
      sender: data.sender,
      recipientId: data.recipientId,
      conversationId: data.conversationId,
    };
    // send a private message to the socket with the given id
    io.to(onlineUsers[onlineId]).emit("new-message", dataToSend);
  });

  socket.on("read-message", (data) => {
    socket.broadcast.emit("read-message", data);
  });

  socket.on("user-typing", (data) => {
    socket.broadcast.emit("user-typing", data);
  });

  socket.on("logout", (id) => {
    sessionUser = null;
    userId = null;
    const onlineId = id.toString();
    if (onlineUsers[onlineId]) {
      delete onlineUsers[onlineId];
      socket.broadcast.emit("remove-offline-user", id);
      socket.disconnect();
    }
  });
});

sessionStore
  .sync()
  .then(() => db.sync())
  .then(() => {
    server.listen(port);
    server.on("error", onError);
    server.on("listening", onListening);
  });

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  const bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;

  console.log("Listening on " + bind);
}
